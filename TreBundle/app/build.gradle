import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    // 默认配置：包名、版本号
    defaultConfig {
        applicationId "com.mjiayou.trebundle"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 7
        versionName "1.0.1" + ".${defaultConfig.versionCode}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    // 签名配置
    signingConfigs {
        def filePath = "local/keystore.properties";
        debug {
            storeFile file(getProperties(filePath).getProperty("signing_debug_storeFile"))
            storePassword getProperties(filePath).getProperty("signing_debug_storePassword")
            keyAlias getProperties(filePath).getProperty("signing_debug_keyAlias")
            keyPassword getProperties(filePath).getProperty("signing_debug_keyPassword")
        }
        release {
            storeFile file(getProperties(filePath).getProperty("signing_release_storeFile"))
            storePassword getProperties(filePath).getProperty("signing_release_storePassword")
            keyAlias getProperties(filePath).getProperty("signing_release_keyAlias")
            keyPassword getProperties(filePath).getProperty("signing_release_keyPassword")
        }
    }

    // 编译配置
    buildTypes {
        debug {
            signingConfig signingConfigs.release // 使用release的签名
            minifyEnabled false // 是否开启混淆
            zipAlignEnabled false // 是否开启ZipAlign优化
            shrinkResources false // 是否移除无用的resource文件
            applicationIdSuffix ".debug" // 包名后缀
            versionNameSuffix "_d${buildTime("yyMMddHHmm")}" // 版本号后缀
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' // 混淆文件位置

            resValue "string", "gradle_build_types_name", name
            resValue "string", "gradle_build_types_value", "调试模式"

            buildConfigField "String", "GRADLE_BUILD_TYPES_NAME", '"debug"'
            buildConfigField "String", "GRADLE_BUILD_TYPES_VALUE", '"调试模式"'
            buildConfigField "boolean", "GRADLE_DEBUG", "true"

            resValue "string", "gradle_app_name", "TreBundle-debug"
            manifestPlaceholders = [gradle_tc_key: "tc-key-debug", gradle_umeng_appkey: "umeng-appkey-debug"]
        }
        release {
            signingConfig signingConfigs.release // 使用release的签名
            minifyEnabled false // 是否开启混淆
            zipAlignEnabled false // 是否开启ZipAlign优化
            shrinkResources false // 是否移除无用的resource文件
            applicationIdSuffix "" // 包名后缀
            versionNameSuffix "_r${buildTime("yyMMdd")}" // 版本号后缀
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' // 混淆文件位置

            resValue "string", "gradle_build_types_name", name
            resValue "string", "gradle_build_types_value", "发布模式"

            buildConfigField "String", "GRADLE_BUILD_TYPES_NAME", '"release"'
            buildConfigField "String", "GRADLE_BUILD_TYPES_VALUE", '"发布模式"'
            buildConfigField "boolean", "GRADLE_DEBUG", "false"

            resValue "string", "gradle_app_name", "TreBundle-release"
            manifestPlaceholders = [gradle_tc_key: "tc-key-release", gradle_umeng_appkey: "umeng-appkey-release"]
        }
    }

    // 发布配置
    productFlavors {
        // 默认渠道 - official
        official {
            resValue "string", "gradle_product_flavors_name", name
            resValue "string", "gradle_product_flavors_value", "官网"

            buildConfigField "String", "GRADLE_PRODUCT_FLAVORS_NAME", '"official"'
            buildConfigField "String", "GRADLE_PRODUCT_FLAVORS_VALUE", '"官网"'
            buildConfigField "boolean", "GRADLE_OFFICIAL", "true"
        }
        // 豌豆夹 - wandoujia
        wandoujia {
            resValue "string", "gradle_product_flavors_name", name
            resValue "string", "gradle_product_flavors_value", "豌豆夹"

            buildConfigField "String", "GRADLE_PRODUCT_FLAVORS_NAME", '"wandoujia"'
            buildConfigField "String", "GRADLE_PRODUCT_FLAVORS_VALUE", '"豌豆夹"'
            buildConfigField "boolean", "GRADLE_OFFICIAL", "false"
        }
        // 应用宝 - yingyongbao
        yingyongbao {
            resValue "string", "gradle_product_flavors_name", name
            resValue "string", "gradle_product_flavors_value", "应用宝"

            buildConfigField "String", "GRADLE_PRODUCT_FLAVORS_NAME", '"yingyongbao"'
            buildConfigField "String", "GRADLE_PRODUCT_FLAVORS_VALUE", '"应用宝"'
            buildConfigField "boolean", "GRADLE_OFFICIAL", "false"
        }
    }
    productFlavors.all {
        flavor ->
            flavor.manifestPlaceholders = [gradle_channel_name: name]
    }

    // 定义输出文件名
    android.applicationVariants.all {
        variant ->
            variant.outputs.each {
                output ->
                    // 输出APK文件名为：proname-1.0.0.1-debug-wandoujia.apk
                    def fileName = "TreBundle-${defaultConfig.versionName}-${buildType.name}-${variant.productFlavors[0].name}.apk";
                    output.outputFile = new File(output.outputFile.parent, fileName);

                    println("gradle | output | fileName -> " + fileName)
            }
    }

    // 打包时的相关配置
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    // 移除lint检测的error：编译的lint开关，程序在buid的时候，会执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }

    // Java的版本配置
    compileOptions {}

    // 源码设置：项目目录结构的设置
    sourceSets {}

    // 开源套件中心
    repositories {
        maven { url "https://jitpack.io" }
    }

    // 拷贝文件到local目录下
    task copyTask(type: Copy) {
        from 'build/outputs/apk/'
        into 'local/'
        exclude '*-unaligned.apk'

        // 重命名
        rename {
            String name -> name.replace(".apk", "-${buildTime("yyMMddHHmm")}.apk")
        }
    }

    // build release
    task bdr(dependsOn: ['assembleRelease', 'copyTask']) {
        copyTask.mustRunAfter 'assembleRelease'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:23.4.0'
    testCompile 'junit:junit:4.12'
    compile project(':lib_TreCore')
}

/**
 * 构建时间
 * @param yyMMddHHmm -> yyMMddHHmm | yyMMdd | yyMM
 * @return
 */
def buildTime(String yyMMddHHmm) {
    def simpleDateFormat = new SimpleDateFormat(yyMMddHHmm)
    simpleDateFormat.setTimeZone(TimeZone.getTimeZone("GMT+8")) // TimeZone.getTimeZone("UTC")
    return simpleDateFormat.format(new Date()) // return new Date().format(yyMMddHHmm, TimeZone.getTimeZone("GMT+8"))
}

/**
 * 打开 filePath 对应的Properties文件
 * @param properties 文件地址，相对根目录为app目录
 * @return
 */
Properties getProperties(String filePath) {
    Properties properties = new Properties()
    properties.load(project.file(filePath).newDataInputStream()) // properties.load(project.rootProject.file("local.properties").newDataInputStream())
    return properties;
}
