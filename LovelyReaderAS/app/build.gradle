import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    // 默认配置：包名、版本号
    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        applicationId rootProject.applicationId
        versionCode rootProject.versionCode
        versionName rootProject.versionName

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        multiDexEnabled true

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    // 签名配置
    signingConfigs {
        debug {
            storeFile file('../keystore/LovelyReader.keystore')
            storePassword 'wDTW09PK'
            keyAlias 'LovelyReader'
            keyPassword "FZmFx7t0"
        }
        release {
            storeFile file('../keystore/LovelyReader.keystore')
            storePassword 'wDTW09PK'
            keyAlias 'LovelyReader'
            keyPassword "FZmFx7t0"
        }
    }

    // 编译配置
    buildTypes {
        debug {
            minifyEnabled false // 是否开启混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' // 混淆文件位置

            debuggable true
            zipAlignEnabled false // 是否开启ZipAlign优化
            shrinkResources false // 是否移除无用的resource文件
            signingConfig signingConfigs.debug // 使用release的签名
            applicationIdSuffix "" // 包名后缀
            versionNameSuffix "" // 版本号后缀
        }
        release {
            minifyEnabled false // 是否开启混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' // 混淆文件位置

            debuggable false
            zipAlignEnabled false // 是否开启ZipAlign优化
            shrinkResources false // 是否移除无用的resource文件
            signingConfig signingConfigs.release // 使用release的签名
            applicationIdSuffix "" // 包名后缀
            versionNameSuffix "" // 版本号后缀
        }
    }

    // 发布配置
    productFlavors {
        // 默认渠道 - official
        official {
            resValue "string", "gradle_product_flavors_name", name
        }
        // 应用宝 - yingyongbao
        yingyongbao {
            resValue "string", "gradle_product_flavors_name", name
        }
    }
    productFlavors.all {
        flavor ->
            flavor.manifestPlaceholders = [gradle_tc_channel: name]
    }

    // 定义输出文件名
    android.applicationVariants.all {
        variant ->
            variant.outputs.each {
                output ->
                    // 输出APK文件名为：TreCore-1.0.0-1-release-official.apk
                    def fileName = "LovelyReader-${defaultConfig.versionName}-${defaultConfig.versionCode}-${buildType.name}-${variant.productFlavors[0].name}.apk"
                    output.outputFile = new File(output.outputFile.parent, fileName)
            }
    }

    // 打包时的相关配置
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    // 移除lint检测的error：编译的lint开关，程序在buid的时候，会执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    // 源码设置：项目目录结构的设置
    sourceSets {
        main.res.srcDirs += 'src/main/res-tre'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'junit:junit:4.12'
    compile 'com.android.support.test:runner:1.0.2'
    compile 'com.android.support.test.espresso:espresso-core:3.0.2'
    compile project(':appbase')
//    compile files('libs/kxml2-2.3.0.jar')
    compile files('libs/reader-2.3.3.jar')
    compile files('libs/slf4j-api-1.6.1.jar')
    compile project(':TreCoreLib')

//    compile "com.jakewharton:butterknife:8.4.0"
//    apt "com.jakewharton:butterknife-compiler:8.4.0"
//    compile("com.hwangjr.rxbus:rxbus:1.0.5") {
//        exclude group: 'com.jakewharton.timber', module: 'timber'
//    }
    compile "com.koushikdutta.async:androidasync:2.+"
    compile 'com.jakewharton.timber:timber:4.1.2'
    compile 'com.tencent.bugly:crashreport:2.8.6' //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    compile 'com.tencent.bugly:nativecrashreport:3.6.0' //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
    compile 'com.qiniu:qiniu-android-sdk:7.2.+'
}

/**
 * 构建时间
 * @param yyMMddHHmm -> yyMMddHHmm | yyMMdd | yyMM
 * @return
 */
def buildTime(String yyMMddHHmm) {
    def simpleDateFormat = new SimpleDateFormat(yyMMddHHmm)
    simpleDateFormat.setTimeZone(TimeZone.getTimeZone("GMT+8")) // TimeZone.getTimeZone("UTC")
    return simpleDateFormat.format(new Date()) // return new Date().format(yyMMddHHmm, TimeZone.getTimeZone("GMT+8"))
}
